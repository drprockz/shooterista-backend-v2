# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AdminLoginInput {
  deviceInfo: String
  email: String!
  ipAddress: String
  password: String!
  tenantId: String
  userAgent: String
}

enum AuditAction {
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  EMAIL_VERIFICATION_COMPLETE
  EMAIL_VERIFICATION_REQUEST
  LOGIN
  LOGIN_FAILED
  LOGOUT
  MFA_DISABLED
  MFA_ENABLED
  MFA_VERIFICATION
  MFA_VERIFICATION_FAILED
  PASSWORD_CHANGE
  PASSWORD_RESET_COMPLETE
  PASSWORD_RESET_REQUEST
  PERMISSION_GRANTED
  PERMISSION_REVOKED
  ROLE_ASSIGNED
  ROLE_REMOVED
  SESSION_CREATED
  SESSION_REVOKED
}

type AuditLog {
  action: AuditAction!
  createdAt: DateTime!
  id: String!
  ipAddress: String
  metadata: String
  resource: String
  resourceId: String
  success: Boolean!
  tenantId: String
  userAgent: String
  userId: String
}

type AuditLogResponse {
  logs: [AuditLog!]!
  totalCount: Int!
}

input AuditLogsInput {
  action: String
  endDate: String
  limit: Float = 50
  offset: Float = 0
  startDate: String
  tenantId: String
  userId: String
}

type AuthPayload {
  accessToken: String!
  expiresIn: Int!
  mfaRequired: Boolean
  mfaType: String
  profileComplete: Boolean
  refreshToken: String!
  requiresConsent: Boolean
  sessionId: String
  user: User!
}

input ChangePasswordInput {
  currentPassword: String!
  ipAddress: String
  newPassword: String!
  userAgent: String
}

input CreateTenantInput {
  address: String
  currency: String
  description: String
  email: String
  logo: String
  name: String!
  phone: String
  slug: String!
  timezone: String
  website: String
}

input CreateUserInput {
  acceptPrivacy: Boolean
  acceptTerms: Boolean
  deviceInfo: String
  email: String!
  firstName: String
  ipAddress: String
  lastName: String
  password: String!
  privacyVersion: String
  tenantId: String
  termsVersion: String
  userAgent: String
  userType: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input EmailVerificationInput {
  ipAddress: String
  token: String!
  userAgent: String
}

type EmailVerificationResponse {
  expiresAt: DateTime
  message: String!
  success: Boolean!
}

enum InvitationStatus {
  ACCEPTED
  CANCELLED
  EXPIRED
  PENDING
}

input LoginInput {
  deviceInfo: String
  email: String!
  ipAddress: String
  password: String!
  rememberMe: Boolean
  tenantId: String
  userAgent: String
}

input LogoutInput {
  refreshToken: String!
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

input MfaDisableInput {
  password: String!
  token: String!
  type: MfaType!
}

type MfaSetup {
  backupCodes: [String!]!
  qrCodeUrl: String!
  secret: String!
}

input MfaSetupInput {
  type: MfaType!
}

enum MfaType {
  EMAIL
  TOTP
}

input MfaVerificationInput {
  backupCode: String
  sessionId: String
  token: String!
  type: MfaType!
}

type Mutation {
  changePassword(input: ChangePasswordInput!): Boolean!
  createTenant(input: CreateTenantInput!): Tenant!
  disableMfa(input: MfaDisableInput!): Boolean!
  enableMfa(input: MfaVerificationInput!): Boolean!
  inviteUser(input: TenantInviteInput!): TenantInvitation!
  login(input: LoginInput!): AuthPayload!
  loginAsAdmin(input: AdminLoginInput!): AuthPayload!
  logout(input: LogoutInput!): Boolean!
  logoutAll: Boolean!
  refreshToken(input: RefreshTokenInput!): TokenRefreshPayload!
  register(input: CreateUserInput!): AuthPayload!
  requestPasswordReset(input: PasswordResetRequestInput!): PasswordResetResponse!
  resendEmailVerification(input: ResendEmailVerificationInput!): EmailVerificationResponse!
  resendOTP(email: String!): OTPResponse!
  resetPassword(input: PasswordResetInput!): Boolean!
  revokeSession(input: SessionRevokeInput!): Boolean!
  sendTestEmail(to: String!): String!
  setupMfa(input: MfaSetupInput!): MfaSetup!
  switchTenant(input: TenantSwitchInput!): TenantSwitchResponse!
  updateTenant(id: String!, input: UpdateTenantInput!): Tenant!
  updateUser(input: UserUpdateInput!): User!
  updateUserProfile(data: String!): String!
  verifyEmail(input: EmailVerificationInput!): Boolean!
  verifyEmailWithOTP(input: OTPVerificationInput!): Boolean!
  verifyMfa(input: MfaVerificationInput!): AuthPayload!
  verifyOTP(input: OTPVerificationInput!): OTPResponse!
}

type OTPResponse {
  expiresAt: DateTime
  message: String!
  resendAfter: Float
  sessionId: String
  success: Boolean!
}

input OTPVerificationInput {
  ipAddress: String
  otp: String!
  sessionId: String!
  userAgent: String
}

input PasswordResetInput {
  ipAddress: String
  newPassword: String!
  token: String!
  userAgent: String
}

input PasswordResetRequestInput {
  email: String!
  ipAddress: String
  tenantId: String
  userAgent: String
}

type PasswordResetResponse {
  expiresAt: DateTime
  message: String!
  success: Boolean!
}

type Permission {
  action: String!
  createdAt: DateTime!
  description: String
  id: String!
  isActive: Boolean!
  name: String!
  resource: String!
  updatedAt: DateTime!
}

enum PlanType {
  BASIC
  CUSTOM
  ENTERPRISE
  FREE
  PREMIUM
}

type Query {
  getAuditLogs(input: AuditLogsInput!): AuditLogResponse!
  getSessionInfo(sessionId: String!): String!
  getSessions(input: SessionListInput!): SessionListResponse!
  getTenant(id: String!): Tenant!
  getTenantBySlug(slug: String!): Tenant!
  getTenantUsers(tenantId: String!): [TenantUser!]!
  getUserActivities: [String!]!
  getUserNotifications: [String!]!
  getUserPreferences: [String!]!
  getUserProfile: String!
  getUserTenants: [TenantUser!]!
  health: String!
  hello: String!
  me: User!
  tenantHealth: String!
  test: String!
  userHealth: String!
}

input RefreshTokenInput {
  deviceInfo: String
  ipAddress: String
  refreshToken: String!
  userAgent: String
}

input ResendEmailVerificationInput {
  email: String!
  ipAddress: String
  tenantId: String
  userAgent: String
}

type Role {
  createdAt: DateTime!
  description: String
  id: String!
  isActive: Boolean!
  name: String!
  permissions: [Permission!]
  tenantId: String
  updatedAt: DateTime!
}

type Session {
  createdAt: DateTime!
  deviceInfo: String
  expiresAt: DateTime!
  id: String!
  ipAddress: String
  isActive: Boolean!
  lastUsedAt: DateTime!
  status: SessionStatus!
  userAgent: String
  userId: String!
}

input SessionListInput {
  activeOnly: Boolean = false
  limit: Float = 20
  offset: Float = 0
}

type SessionListResponse {
  activeCount: Int!
  sessions: [Session!]!
  totalCount: Int!
}

input SessionRevokeInput {
  sessionId: String!
}

enum SessionStatus {
  ACTIVE
  EXPIRED
  REVOKED
}

type Tenant {
  address: String
  createdAt: DateTime!
  currency: String!
  description: String
  email: String
  id: ID!
  isActive: Boolean!
  logo: String
  name: String!
  phone: String
  planExpiry: DateTime
  planType: PlanType!
  slug: String!
  timezone: String!
  updatedAt: DateTime!
  users: [String!]
  website: String
}

type TenantInvitation {
  createdAt: DateTime!
  email: String!
  expiresAt: DateTime!
  id: ID!
  invitedBy: ID!
  role: TenantUserRole!
  status: InvitationStatus!
  tenant: Tenant
  tenantId: ID!
  token: String!
}

input TenantInviteInput {
  email: String!
  role: String
  tenantId: String!
}

input TenantSwitchInput {
  tenantId: String!
}

type TenantSwitchResponse {
  membership: TenantUser!
  message: String!
  success: Boolean!
}

type TenantUser {
  createdAt: DateTime!
  id: ID!
  joinedAt: DateTime!
  leftAt: DateTime
  role: TenantUserRole!
  status: MembershipStatus!
  tenant: Tenant
  tenantId: ID!
  updatedAt: DateTime!
  userId: ID!
}

enum TenantUserRole {
  ADMIN
  MANAGER
  MEMBER
  OWNER
  VIEWER
}

type TokenRefreshPayload {
  accessToken: String!
  expiresIn: Int!
  refreshToken: String!
}

input UpdateTenantInput {
  address: String
  currency: String
  description: String
  email: String
  isActive: Boolean
  logo: String
  name: String
  phone: String
  timezone: String
  website: String
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String
  id: String!
  isEmailVerified: Boolean!
  isMfaEnabled: Boolean!
  lastLoginAt: DateTime
  lastName: String
  passwordChangedAt: DateTime
  permissions: [Permission!]
  roles: [Role!]
  status: UserStatus!
  tenantId: String
  updatedAt: DateTime!
  userType: UserType!
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

enum UserType {
  ADMIN
  ATHLETE
  SUPERADMIN
}

input UserUpdateInput {
  firstName: String
  lastName: String
  status: UserStatus
}