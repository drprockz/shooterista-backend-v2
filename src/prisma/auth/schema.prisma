datasource db {
  provider = "postgresql"
  url      = env("AUTH_DB_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/auth"
}

// =============================================================================
// AUTHENTICATION CORE MODELS
// =============================================================================
// This schema focuses ONLY on authentication concerns:
// - User accounts and credentials
// - Token management
// - Session tracking
// - Basic security features (MFA, password reset)

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  firstName         String?
  lastName          String?
  userType          UserType  @default(ATHLETE) // superadmin | admin | athlete
  tenantId          String?   // Link to tenant for multi-tenancy
  isEmailVerified   Boolean   @default(false)
  isMfaEnabled      Boolean   @default(false)
  mfaSecret         String?
  lastLoginAt       DateTime?
  passwordChangedAt DateTime?
  isActive          Boolean   @default(true)
  
  // Profile Completion Flags
  isFirstLogin      Boolean   @default(true)
  profileCompletion Int       @default(0) // 0-100 percentage
  profileStatus     ProfileStatus @default(DRAFT)
  modulesUnlocked   Boolean   @default(false) // derived: true iff profileStatus=APPROVED && profileCompletion=100
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  refreshTokens     RefreshToken[]
  sessions          Session[]
  auditLogs         AuditLog[]
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  userProfile       UserProfile?
  profileDrafts     UserProfileDraft[]
  
  @@index([email])
  @@index([isActive])
  @@index([userType])
  @@index([tenantId])
  @@index([profileStatus])
  @@index([profileCompletion])
  @@map("users")
}

model RefreshToken {
  id        Int       @id @default(autoincrement())
  userId    Int
  token     String    @unique
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model Session {
  id          String    @id @default(cuid())
  userId      Int
  deviceInfo  String?   // Device fingerprint
  ipAddress   String?
  userAgent   String?
  isActive    Boolean   @default(true)
  lastUsedAt  DateTime  @default(now())
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
  @@map("sessions")
}

model AuditLog {
  id          Int       @id @default(autoincrement())
  userId      Int?
  action      String    // e.g., 'login', 'logout', 'password_change', 'mfa_enabled'
  resource    String?   // e.g., 'user', 'session'
  resourceId  String?   // ID of the affected resource
  ipAddress   String?
  userAgent   String?
  metadata    Json?     // Additional context data
  success     Boolean   @default(true)
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  reason    String   // e.g., 'logout', 'password_change', 'security_breach'
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([expiresAt])
  @@map("blacklisted_tokens")
}

model RateLimit {
  id        Int      @id @default(autoincrement())
  key       String   // e.g., 'login:user:123' or 'login:ip:192.168.1.1'
  attempts  Int      @default(1)
  windowStart DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([key])
  @@index([windowStart])
  @@map("rate_limits")
}

// =============================================================================
// ENUMS
// =============================================================================

enum UserType {
  SUPERADMIN
  ADMIN
  ATHLETE
}

enum ProfileStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum ProfileSection {
  PERSONAL
  CONTACT
  EDUCATION
  JOB
  EVENT
}

// =============================================================================
// PROFILE COMPLETION MODELS
// =============================================================================

model UserProfile {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  
  // Personal Information
  personalData      Json?     // firstName, lastName, DOB, gender, photo
  personalComplete  Boolean   @default(false)
  personalUpdatedAt DateTime?
  personalUpdatedBy Int?
  
  // Contact Information
  contactData       Json?     // email (verified), phone, address, city, state, country, postalCode
  contactComplete   Boolean   @default(false)
  contactUpdatedAt  DateTime?
  contactUpdatedBy  Int?
  
  // Education Information
  educationData     Json?     // highestQualification, institution, year
  educationComplete Boolean   @default(false)
  educationUpdatedAt DateTime?
  educationUpdatedBy Int?
  
  // Job Information
  jobData           Json?     // occupation, company, role, experienceYears
  jobComplete       Boolean   @default(false)
  jobUpdatedAt      DateTime?
  jobUpdatedBy      Int?
  
  // Event/Sports Information
  eventData         Json?     // primaryDiscipline, experienceLevel, federationId/clubId
  eventComplete     Boolean   @default(false)
  eventUpdatedAt    DateTime?
  eventUpdatedBy    Int?
  
  // Metadata
  dataVersion       Int       @default(1)
  submittedAt       DateTime?
  approvedAt        DateTime?
  approvedBy        Int?
  rejectedAt        DateTime?
  rejectedBy        Int?
  rejectionReason   String?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([submittedAt])
  @@index([approvedAt])
  @@map("user_profiles")
}

model UserProfileDraft {
  id                Int       @id @default(autoincrement())
  userId            Int
  
  // Section-specific draft data
  section           ProfileSection
  draftData         Json      // Partial JSON blob for the section
  lastSavedAt       DateTime  @default(now())
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, section]) // One draft per section per user
  @@index([userId])
  @@index([section])
  @@index([lastSavedAt])
  @@map("user_profile_drafts")
}

// =============================================================================
// RBAC MODELS - TEMPORARILY DISABLED
// =============================================================================
// Role and permission models have been temporarily removed to simplify the system
// They can be re-added later when RBAC is needed