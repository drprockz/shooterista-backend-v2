datasource db {
  provider = "postgresql"
  url      = env("AUTH_DB_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/auth"
}

// =============================================================================
// AUTHENTICATION CORE MODELS
// =============================================================================
// This schema focuses ONLY on authentication concerns:
// - User accounts and credentials
// - Token management
// - Session tracking
// - Basic security features (MFA, password reset)

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  firstName         String?
  lastName          String?
  userType          UserType  @default(ATHLETE) // superadmin | admin | athlete
  tenantId          String?   // Link to tenant for multi-tenancy
  isEmailVerified   Boolean   @default(false)
  isMfaEnabled      Boolean   @default(false)
  mfaSecret         String?
  lastLoginAt       DateTime?
  passwordChangedAt DateTime?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  refreshTokens     RefreshToken[]
  sessions          Session[]
  auditLogs         AuditLog[]
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  
  @@index([email])
  @@index([isActive])
  @@index([userType])
  @@index([tenantId])
  @@map("users")
}

model RefreshToken {
  id        Int       @id @default(autoincrement())
  userId    Int
  token     String    @unique
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model Session {
  id          String    @id @default(cuid())
  userId      Int
  deviceInfo  String?   // Device fingerprint
  ipAddress   String?
  userAgent   String?
  isActive    Boolean   @default(true)
  lastUsedAt  DateTime  @default(now())
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
  @@map("sessions")
}

model AuditLog {
  id          Int       @id @default(autoincrement())
  userId      Int?
  action      String    // e.g., 'login', 'logout', 'password_change', 'mfa_enabled'
  resource    String?   // e.g., 'user', 'session'
  resourceId  String?   // ID of the affected resource
  ipAddress   String?
  userAgent   String?
  metadata    Json?     // Additional context data
  success     Boolean   @default(true)
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  reason    String   // e.g., 'logout', 'password_change', 'security_breach'
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([expiresAt])
  @@map("blacklisted_tokens")
}

model RateLimit {
  id        Int      @id @default(autoincrement())
  key       String   // e.g., 'login:user:123' or 'login:ip:192.168.1.1'
  attempts  Int      @default(1)
  windowStart DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([key])
  @@index([windowStart])
  @@map("rate_limits")
}

// =============================================================================
// ENUMS
// =============================================================================

enum UserType {
  SUPERADMIN
  ADMIN
  ATHLETE
}

// =============================================================================
// RBAC MODELS - TEMPORARILY DISABLED
// =============================================================================
// Role and permission models have been temporarily removed to simplify the system
// They can be re-added later when RBAC is needed